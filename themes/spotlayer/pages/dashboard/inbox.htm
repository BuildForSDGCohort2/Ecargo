title = "Inbox"
url = "/dashboard/inbox"
layout = "admin"
is_hidden = 0
role = 0
permission = 0
anonymous_only = 0
logged_only = 1
child_of = "dashboard/dashboard"
menu_breadcrumb = "inbox"
hide_crumb = 0
remove_crumb_trail = 0
crumb_disabled = 0

[viewBag]
==
<?php
function onStart(){

    $this['item']           =   \RainLab\User\Models\User::find($this->param('id'));
    $this['messages']       =   \Zainab\SimpleContact\Models\SimpleContact::orderBy('id','desc')->paginate(20);

}
function onView(){
    $data = post();

    $this['message']        =   $message =   \Zainab\SimpleContact\Models\SimpleContact::find($data['id']);
    $message->is_new        =   0;
    $message->update();

    return $this['message']->toArray();
}
function onReply(){
    $data = post();


    $message       =   \Zainab\SimpleContact\Models\SimpleContact::find($data['id']);
    echo '<pre>';print_r($data);exit;
}
?>
==
<!--Begin::Inbox-->
<div class="kt-grid kt-grid--desktop kt-grid--ver-desktop  kt-inbox" id="kt_inbox">


    <!--Begin:: Inbox List-->
    <div class="kt-grid__item kt-grid__item--fluid    kt-portlet    kt-inbox__list kt-inbox__list--shown kt-margin-l-0" id="kt_inbox_list">
        <div class="kt-portlet__head">
            <div class="kt-inbox__toolbar kt-inbox__toolbar--extended">
                <div class="kt-inbox__actions kt-inbox__actions--expanded">
                    <h4>{{'Inbox'|__}}</h4>
                </div>


                {% if messages.lastPage > 1 %}
                    <div class="kt-inbox__controls">

                        <div class="kt-inbox__pages" data-toggle="kt-tooltip" title="{{'Records per page'|__}}">
                            <span class="kt-inbox__perpage">{{'Display'|__}} {{messages.count}} {{'of'|__}} {{messages.total}}</span>
                        </div>

                        {% if messages.currentPage > 1 %}
                            <a href="{{ messages.previousPageUrl }}" class="kt-inbox__icon" data-toggle="kt-tooltip" title="{{'Previose page'|__}}">
                                <i class="flaticon2-left-arrow"></i>
                            </a>
                        {% else %}
                            <a href="javascript:;" class="kt-inbox__icon disabled">
                                <i class="flaticon2-left-arrow"></i>
                            </a>
                        {% endif %}

                        {% if messages.lastPage > messages.currentPage %}
                            <a href="{{ messages.nextPageUrl }}" class="kt-inbox__icon" data-toggle="kt-tooltip" title="{{'Next page'|__}}">
                                <i class="flaticon2-right-arrow"></i>
                            </a>
                        {% else %}
                            <a href="javascript:;" class="kt-inbox__icon disabled">
                                <i class="flaticon2-right-arrow"></i>
                            </a>
                        {% endif %}

                    </div>

                {% endif %}
            </div>
        </div>
        <div class="kt-portlet__body kt-portlet__body--fit-x">
            <div class="kt-inbox__items" data-type="inbox">
                {% for message in messages %}
                    <div class="kt-inbox__item{% if message.is_new == 1 %} kt-inbox__item--unread{% endif %}" data-id="{{message.id}}" data-type="inbox">
                        <div class="kt-inbox__info">
                            <div class="kt-inbox__sender" data-toggle="view">
                                <span class="kt-media kt-media--sm kt-media--{% if message.is_new == 1 %}danger{% else %}success{% endif %}">
                                    <span>{{message.name|capitalize|slice(0,2)}}</span>
                                </span>
                                <a href="javascript:;" class="kt-inbox__author">{{message.name}}</a>
                            </div>
                        </div>
                        <div class="kt-inbox__details">
                            <div class="kt-inbox__message">
                                <span class="kt-inbox__subject">{{message.subject}} - </span>
                                <span class="kt-inbox__summary">{{message.message|slice(0,1)}}...</span>
                            </div>
                            {% if message.is_new == 1 %}
                                <div class="kt-inbox__labels">
                                    <span class="kt-inbox__label kt-badge kt-badge--unified-danger kt-badge--bold kt-badge--inline">{{'Unreaded'|__}}</span>
                                </div>
                            {% endif %}
                        </div>
                        <div class="kt-inbox__datetime" data-toggle="view">
                            {{message.created_at|date(settings.dateformat)}} {{message.created_at|date('h:i')}} {{message.created_at|date('a')|__}}
                        </div>
                    </div>
                {% else %}
                    <div class="kt-inbox__itemkt-inbox__item--unread kt-margin-20">
                        <div class="kt-inbox__info">
                            <div class="kt-inbox__sender text-center">
                                <span>{{'Nothing here rightnow'|__}}</span>
                            </div>
                        </div>
                    </div>
                {% endfor %}
            </div>
        </div>
    </div>
    <!--End:: Inbox List-->

    <!--Begin:: Inbox View-->
    <div class="kt-grid__item kt-grid__item--fluid    kt-portlet    kt-inbox__view kt-inbox__view--shown-" id="kt_inbox_view">
        <div class="kt-portlet__head">
            <div class="kt-inbox__toolbar">
                <div class="kt-inbox__actions">
                    <a href="{{'dashboard/inbox'|page}}" class="kt-inbox__icon kt-inbox__icon--back">
                        <i class="flaticon2-left-arrow-1"></i>
                    </a>
                </div>
            </div>
        </div>

        <div class="kt-portlet__body kt-portlet__body--fit-x kt-padding-b-0">
            <div class="kt-inbox__subject">
                <div class="kt-inbox__title">
                    <h3 class="kt-inbox__text" id="message_title"></h3>
                </div>
            </div>

            <div class="kt-inbox__messages">
                <div class="kt-inbox__message kt-inbox__message--expanded kt-padding-t-20">
                    <div class="kt-inbox__head">
                        <div class="kt-inbox__info">
                            <div class="kt-inbox__author">
                                <a href="javascript:;" class="kt-inbox__name message_sender"  data-toggle="dropdown" aria-expanded="true"></a>  <i  data-toggle="dropdown" aria-expanded="true" class="flaticon2-down"></i>

                                <div class="kt-inbox__details">
                                    <div class="kt-inbox__tome show">
                                        <div class="dropdown-menu dropdown-menu-fit dropdown-menu-md dropdown-menu-{% if currentLang == 'ar'%}right{% else %}left{% endif %}" x-placement="bottom-start">
                                            <table class="kt-inbox__details">
                                                <tbody>
                                                    <tr>
                                                        <td>{{'from'|__}}</td>
                                                        <td class="message_sender"></td>
                                                    </tr>
                                                    <tr>
                                                        <td>{{'date'|__}}:</td>
                                                        <td class="message_created_at"></td>
                                                    </tr>
                                                    <tr>
                                                        <td>{{'email'|__}}:</td>
                                                        <td class="message_email"></td>
                                                    </tr>
                                                    <tr>
                                                        <td>{{'phone'|__}}:</td>
                                                        <td class="message_phone"></td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="kt-inbox__actions">
                            <div class="kt-inbox__datetime message_created_at" data-toggle="expand" ></div>
                        </div>
                    </div>
                    <div class="kt-inbox__body">
                        <div class="kt-inbox__text" id="message_content"></div>
                    </div>
                </div>
            </div>

            <!--<div class="kt-inbox__reply kt-inbox__reply--on">
                {{ form_ajax('onReply', { success: 'created successfully!', flash: true, class: 'kt_form' }) }}
                    <div class="kt-inbox__form" id="kt_inbox_reply_form">
                        <input type="hidden" name="id" id="message_id" />
                        <div class="kt-inbox__body">
                            <input name="message" type="hidden">
                            <div class="kt-inbox__editor" id="kt_inbox_reply_editor" style="height: 200px;"></div>
                        </div>
                        <div class="kt-inbox__foot">
                            <div class="kt-inbox__primary">
                                <button type="submit" class="btn btn-brand btn-bold">
                                    {{'Send'|__}}
                                </button>
                            </div>
                        </div>
                    </div>
                {{ form_close() }}
            </div>-->
        </div>
    </div>
    <!--End:: Inbox View-->
</div>
<!--End::Inbox-->

{% put styles %}
    <style>
        .map_canvas {
            height: 350px !important;
            width: 100% !important;
        }
        .accordion > .card:last-child {
            border-bottom: 1px solid #eee;
        }
    </style>
    {% if currentLang == 'ar'%}
     <link href="{{ 'assets/admin/css/demo1/pages/inbox/inbox.rtl.css'|theme }}" rel="stylesheet" type="text/css" />
     {% else %}
     <link href="{{ 'assets/admin/css/demo1/pages/inbox/inbox.css'|theme }}" rel="stylesheet" type="text/css" />
     {% endif %}
{% endput %}
{% put scripts %}
    <script type="text/javascript">
        "use strict";

        // Class definition
        var KTAppInbox = function() {
            var asideEl = KTUtil.getByID('kt_inbox_aside');
            var listEl = KTUtil.getByID('kt_inbox_list');
            var viewEl = KTUtil.getByID('kt_inbox_view');
            var composeEl = KTUtil.getByID('kt_inbox_compose');

            var asideOffcanvas;

            var initEditor = function(editor) {
                // init editor
                var options = {
                    modules: {
                        toolbar: [['bold', 'italic', 'underline', 'strike'],[{ 'list': 'ordered'}, { 'list': 'bullet' }]]
                    },
                    placeholder: '{{"Type message"|__}}...',
                    theme: 'snow'
                };

                var editor = new Quill('#' + editor, options);
            }

            var initForm = function(formEl) {
                var formEl = KTUtil.getByID(formEl);

                // Init autocompletes
                var toEl = KTUtil.find(formEl, '[name=compose_to]');
                var tagifyTo = new Tagify(toEl, {
                    delimiters: ", ", // add new tags when a comma or a space character is entered
                    maxTags: 10,
                    blacklist: ["fuck", "shit", "pussy"],
                    keepInvalidTags: true, // do not remove invalid tags (but keep them marked as invalid)
                    whitelist: [{
                        value: 'Chris Muller',
                        email: 'chris.muller@wix.com',
                        initials: '',
                        initialsState: '',
                        pic: './assets/media/users/100_11.jpg',
                        class: 'tagify__tag--brand'
                    }, {
                        value: 'Nick Bold',
                        email: 'nick.seo@gmail.com',
                        initials: 'SS',
                        initialsState: 'warning',
                        pic: ''
                    }, {
                        value: 'Alon Silko',
                        email: 'alon@keenthemes.com',
                        initials: '',
                        initialsState: '',
                        pic: './assets/media/users/100_6.jpg'
                    }, {
                        value: 'Sam Seanic',
                        email: 'sam.senic@loop.com',
                        initials: '',
                        initialsState: '',
                        pic: './assets/media/users/100_8.jpg'
                    }, {
                        value: 'Sara Loran',
                        email: 'sara.loran@tilda.com',
                        initials: '',
                        initialsState: '',
                        pic: './assets/media/users/100_9.jpg'
                    }, {
                        value: 'Eric Davok',
                        email: 'davok@mix.com',
                        initials: '',
                        initialsState: '',
                        pic: './assets/media/users/100_13.jpg'
                    }, {
                        value: 'Sam Seanic',
                        email: 'sam.senic@loop.com',
                        initials: '',
                        initialsState: '',
                        pic: './assets/media/users/100_13.jpg'
                    }, {
                        value: 'Lina Nilson',
                        email: 'lina.nilson@loop.com',
                        initials: 'LN',
                        initialsState: 'danger',
                        pic: './assets/media/users/100_15.jpg'
                    }],
                    templates: {
                        dropdownItem: function(tagData) {
                            try {
                                var html = '';

                                html += '<div class="tagify__dropdown__item">';
                                html += '   <div class="kt-media-card">';
                                html += '       <span class="kt-media kt-media--' + (tagData.initialsState ? tagData.initialsState : '') + '" style="background-image: url(\''+ (tagData.pic ? tagData.pic : '') + '\')">';
                                html += '           <span>' + (tagData.initials ? tagData.initials : '') + '</span>';
                                html += '       </span>';
                                html += '       <div class="kt-media-card__info">';
                                html += '           <a href="#" class="kt-media-card__title">'+ (tagData.value ? tagData.value : '') + '</a>';
                                html += '           <span class="kt-media-card__desc">' + (tagData.email ? tagData.email : '') + '</span>';
                                html += '       </div>';
                                html += '   </div>';
                                html += '</div>';

                                return html;
                            } catch (err) {}
                        }
                    },
                    transformTag: function(tagData) {
                        tagData.class = 'tagify__tag tagify__tag--brand';
                    },
                    dropdown: {
                        classname: "color-blue",
                        enabled: 1,
                        maxItems: 5
                    }
                });

                var ccEl = KTUtil.find(formEl, '[name=compose_cc]');
                var tagifyC = new Tagify(ccEl, {
                    delimiters: ", ", // add new tags when a comma or a space character is entered
                    maxTags: 10,
                    blacklist: ["fuck", "shit", "pussy"],
                    keepInvalidTags: true, // do not remove invalid tags (but keep them marked as invalid)
                    whitelist: [{
                        value: 'Chris Muller',
                        email: 'chris.muller@wix.com',
                        initials: '',
                        initialsState: '',
                        pic: './assets/media/users/100_11.jpg',
                        class: 'tagify__tag--brand'
                    }, {
                        value: 'Nick Bold',
                        email: 'nick.seo@gmail.com',
                        initials: 'SS',
                        initialsState: 'warning',
                        pic: ''
                    }, {
                        value: 'Alon Silko',
                        email: 'alon@keenthemes.com',
                        initials: '',
                        initialsState: '',
                        pic: './assets/media/users/100_6.jpg'
                    }, {
                        value: 'Sam Seanic',
                        email: 'sam.senic@loop.com',
                        initials: '',
                        initialsState: '',
                        pic: './assets/media/users/100_8.jpg'
                    }, {
                        value: 'Sara Loran',
                        email: 'sara.loran@tilda.com',
                        initials: '',
                        initialsState: '',
                        pic: './assets/media/users/100_9.jpg'
                    }, {
                        value: 'Eric Davok',
                        email: 'davok@mix.com',
                        initials: '',
                        initialsState: '',
                        pic: './assets/media/users/100_13.jpg'
                    }, {
                        value: 'Sam Seanic',
                        email: 'sam.senic@loop.com',
                        initials: '',
                        initialsState: '',
                        pic: './assets/media/users/100_13.jpg'
                    }, {
                        value: 'Lina Nilson',
                        email: 'lina.nilson@loop.com',
                        initials: 'LN',
                        initialsState: 'danger',
                        pic: './assets/media/users/100_15.jpg'
                    }],
                    templates: {
                        dropdownItem: function(tagData) {
                            try {
                                var html = '';

                                html += '<div class="tagify__dropdown__item">';
                                html += '   <div class="kt-media-card">';
                                html += '       <span class="kt-media kt-media--' + (tagData.initialsState ? tagData.initialsState : '') + '" style="background-image: url(\''+ (tagData.pic ? tagData.pic : '') + '\')">';
                                html += '           <span>' + (tagData.initials ? tagData.initials : '') + '</span>';
                                html += '       </span>';
                                html += '       <div class="kt-media-card__info">';
                                html += '           <a href="#" class="kt-media-card__title">'+ (tagData.value ? tagData.value : '') + '</a>';
                                html += '           <span class="kt-media-card__desc">' + (tagData.email ? tagData.email : '') + '</span>';
                                html += '       </div>';
                                html += '   </div>';
                                html += '</div>';

                                return html;
                            } catch (err) {}
                        }
                    },
                    transformTag: function(tagData) {
                        tagData.class = 'tagify__tag tagify__tag--brand';
                    },
                    dropdown: {
                        classname: "color-blue",
                        enabled: 1,
                        maxItems: 5
                    }
                });

                var bccEl = KTUtil.find(formEl, '[name=compose_bcc]');
                var tagifyBcc = new Tagify(bccEl, {
                    delimiters: ", ", // add new tags when a comma or a space character is entered
                    maxTags: 10,
                    blacklist: ["fuck", "shit", "pussy"],
                    keepInvalidTags: true, // do not remove invalid tags (but keep them marked as invalid)
                    whitelist: [{
                        value: 'Chris Muller',
                        email: 'chris.muller@wix.com',
                        initials: '',
                        initialsState: '',
                        pic: './assets/media/users/100_11.jpg',
                        class: 'tagify__tag--brand'
                    }, {
                        value: 'Nick Bold',
                        email: 'nick.seo@gmail.com',
                        initials: 'SS',
                        initialsState: 'warning',
                        pic: ''
                    }, {
                        value: 'Alon Silko',
                        email: 'alon@keenthemes.com',
                        initials: '',
                        initialsState: '',
                        pic: './assets/media/users/100_6.jpg'
                    }, {
                        value: 'Sam Seanic',
                        email: 'sam.senic@loop.com',
                        initials: '',
                        initialsState: '',
                        pic: './assets/media/users/100_8.jpg'
                    }, {
                        value: 'Sara Loran',
                        email: 'sara.loran@tilda.com',
                        initials: '',
                        initialsState: '',
                        pic: './assets/media/users/100_9.jpg'
                    }, {
                        value: 'Eric Davok',
                        email: 'davok@mix.com',
                        initials: '',
                        initialsState: '',
                        pic: './assets/media/users/100_13.jpg'
                    }, {
                        value: 'Sam Seanic',
                        email: 'sam.senic@loop.com',
                        initials: '',
                        initialsState: '',
                        pic: './assets/media/users/100_13.jpg'
                    }, {
                        value: 'Lina Nilson',
                        email: 'lina.nilson@loop.com',
                        initials: 'LN',
                        initialsState: 'danger',
                        pic: './assets/media/users/100_15.jpg'
                    }],
                    templates: {
                        dropdownItem: function(tagData) {
                            try {
                                var html = '';

                                html += '<div class="tagify__dropdown__item">';
                                html += '   <div class="kt-media-card">';
                                html += '       <span class="kt-media kt-media--' + (tagData.initialsState ? tagData.initialsState : '') + '" style="background-image: url(\''+ (tagData.pic ? tagData.pic : '') + '\')">';
                                html += '           <span>' + (tagData.initials ? tagData.initials : '') + '</span>';
                                html += '       </span>';
                                html += '       <div class="kt-media-card__info">';
                                html += '           <a href="#" class="kt-media-card__title">'+ (tagData.value ? tagData.value : '') + '</a>';
                                html += '           <span class="kt-media-card__desc">' + (tagData.email ? tagData.email : '') + '</span>';
                                html += '       </div>';
                                html += '   </div>';
                                html += '</div>';

                                return html;
                            } catch (err) {}
                        }
                    },
                    transformTag: function(tagData) {
                        tagData.class = 'tagify__tag tagify__tag--brand';
                    },
                    dropdown: {
                        classname: "color-blue",
                        enabled: 1,
                        maxItems: 5
                    }
                });

                // CC input display
                KTUtil.on(formEl, '.kt-inbox__to .kt-inbox__tool.kt-inbox__tool--cc', 'click', function(e) {
                    var inputEl = KTUtil.find(formEl, '.kt-inbox__to');
                    KTUtil.addClass(inputEl, 'kt-inbox__to--cc');
                    KTUtil.find(formEl, "[name=compose_cc]").focus();
                });

                // CC input hide
                KTUtil.on(formEl, '.kt-inbox__to .kt-inbox__field.kt-inbox__field--cc .kt-inbox__icon--delete', 'click', function(e) {
                    var inputEl = KTUtil.find(formEl, '.kt-inbox__to');
                    KTUtil.removeClass(inputEl, 'kt-inbox__to--cc');
                });

                // BCC input display
                KTUtil.on(formEl, '.kt-inbox__to .kt-inbox__tool.kt-inbox__tool--bcc', 'click', function(e) {
                    var inputEl = KTUtil.find(formEl, '.kt-inbox__to');
                    KTUtil.addClass(inputEl, 'kt-inbox__to--bcc');
                    KTUtil.find(formEl, "[name=compose_bcc]").focus();
                });

                // BCC input hide
                KTUtil.on(formEl, '.kt-inbox__to .kt-inbox__field.kt-inbox__field--bcc .kt-inbox__icon--delete', 'click', function(e) {
                    var inputEl = KTUtil.find(formEl, '.kt-inbox__to');
                    KTUtil.removeClass(inputEl, 'kt-inbox__to--bcc');
                });
            }

            var initAttachments = function(elemId) {
                var id = "#" + elemId;
                var previewNode = $(id + " .dropzone-item");
                previewNode.id = "";
                var previewTemplate = previewNode.parent('.dropzone-items').html();
                previewNode.remove();

                var myDropzone = new Dropzone(id, { // Make the whole body a dropzone
                    url: "//keenthemes.com/scripts/void.php", // Set the url for your upload script location
                    parallelUploads: 20,
                    maxFilesize: 1, // Max filesize in MB
                    previewTemplate: previewTemplate,
                    previewsContainer: id + " .dropzone-items", // Define the container to display the previews
                    clickable: id + "_select" // Define the element that should be used as click trigger to select files.
                });

                myDropzone.on("addedfile", function(file) {
                    // Hookup the start button
                    $(document).find(id + ' .dropzone-item').css('display', '');
                });

                // Update the total progress bar
                myDropzone.on("totaluploadprogress", function(progress) {
                    document.querySelector(id + " .progress-bar").style.width = progress + "%";
                });

                myDropzone.on("sending", function(file) {
                    // Show the total progress bar when upload starts
                    document.querySelector(id + " .progress-bar").style.opacity = "1";
                });

                // Hide the total progress bar when nothing's uploading anymore
                myDropzone.on("complete", function(progress) {
                    var thisProgressBar = id + " .dz-complete";
                    setTimeout(function() {
                        $(thisProgressBar + " .progress-bar, " + thisProgressBar + " .progress").css('opacity', '0');
                    }, 300)
                });
            }

            return {
                // public functions
                init: function() {
                    // init
                    KTAppInbox.initAside();
                    KTAppInbox.initList();
                    KTAppInbox.initView();
                    //KTAppInbox.initReply();
                    //KTAppInbox.initCompose();
                },

                initAside: function() {
                    // Mobile offcanvas for mobile mode
                    asideOffcanvas = new KTOffcanvas(asideEl, {
                        overlay: true,
                        baseClass: 'kt-inbox__aside',
                        closeBy: 'kt_inbox_aside_close',
                        toggleBy: 'kt_subheader_mobile_toggle'
                    });

                    // View list
                    KTUtil.on(asideEl, '.kt-nav__item .kt-nav__link[data-action="list"]', 'click', function(e) {
                        var type = KTUtil.attr(this, 'data-type');
                        var listItemsEl = KTUtil.find(listEl, '.kt-inbox__items');
                        var navItemEl = this.closest('.kt-nav__item');
                        var navItemActiveEl = KTUtil.find(asideEl, '.kt-nav__item.kt-nav__item--active');

                        // demo loading
                        var loading = new KTDialog({
                            'type': 'loader',
                            'placement': 'top center',
                            'message': '{{"Loading"|__}} ...'
                        });
                        loading.show();

                        setTimeout(function() {
                            loading.hide();

                            KTUtil.css(listEl, 'display', 'flex'); // show list
                            KTUtil.css(viewEl, 'display', 'none'); // hide view

                            KTUtil.addClass(navItemEl, 'kt-nav__item--active');
                            KTUtil.removeClass(navItemActiveEl, 'kt-nav__item--active');

                            KTUtil.attr(listItemsEl, 'data-type', type);
                        }, 600);
                    });
                },

                initList: function() {
                    // View message
                    KTUtil.on(listEl, '.kt-inbox__item', 'click', function(e) {
                        var actionsEl = KTUtil.find(this, '.kt-inbox__actions');

                        // skip actions click
                        if (e.target === actionsEl || (actionsEl && actionsEl.contains(e.target) === true)) {
                            return false;
                        }

                        // demo loading
                        var loading = new KTDialog({
                            'type': 'loader',
                            'placement': 'top center',
                            'message': '{{"Loading"|__}} ...'
                        });
                        loading.show();

                        var id = $(this).attr('data-id');

                         $.request('onView', {
                              data: {id: id},
                              success: function(response, status, xhr, $form) {
                                  loading.hide();
                                  $("#message_title").html(response.subject);
                                  $(".message_sender").html(response.name);
                                  $(".message_created_at").html(response.created_at);
                                  $(".message_phone").html(response.phone);
                                  $(".message_email").html(response.email);
                                  $("#message_content").html(response.message);
                                  $("#message_id").val(response.id);
                                  KTUtil.css(listEl, 'display', 'none');
                                  KTUtil.css(viewEl, 'display', 'flex');
                              }
                          });
                    });

                    // Group selection
                    KTUtil.on(listEl, '.kt-inbox__toolbar .kt-inbox__check .kt-checkbox input', 'click', function() {
                        var items = KTUtil.findAll(listEl, '.kt-inbox__items .kt-inbox__item');

                        for (var i = 0, j = items.length; i < j; i++) {
                            var item = items[i];
                            var checkbox = KTUtil.find(item, '.kt-inbox__actions .kt-checkbox input');
                            checkbox.checked = this.checked;

                            if (this.checked) {
                                KTUtil.addClass(item, 'kt-inbox__item--selected');
                            } else {
                                KTUtil.removeClass(item, 'kt-inbox__item--selected');
                            }
                        }
                    });

                    // Individual selection
                    KTUtil.on(listEl, '.kt-inbox__item .kt-checkbox input', 'click', function() {
                        var item = this.closest('.kt-inbox__item');

                        if (item && this.checked) {
                            KTUtil.addClass(item, 'kt-inbox__item--selected');
                        } else {
                            KTUtil.removeClass(item, 'kt-inbox__item--selected');
                        }
                    });
                },

                initView: function() {
                    // Back to listing
                    KTUtil.on(viewEl, '.kt-inbox__toolbar .kt-inbox__icon.kt-inbox__icon--back', 'click', function() {
                        // demo loading
                        var loading = new KTDialog({
                            'type': 'loader',
                            'placement': 'top center',
                            'message': '{{"Loading"|__}} ...'
                        });
                        loading.show();

                        setTimeout(function() {
                            loading.hide();

                            KTUtil.css(listEl, 'display', 'flex');
                            KTUtil.css(viewEl, 'display', 'none');
                        }, 1000);
                    });

                },

                initReply: function() {
                    initEditor('kt_inbox_reply_editor');
                    initAttachments('kt_inbox_reply_attachments');
                    initForm('kt_inbox_reply_form');

                    // Show/Hide reply form
                    KTUtil.on(viewEl, '.kt-inbox__reply .kt-inbox__actions .btn', 'click', function(e) {
                        var reply = this.closest('.kt-inbox__reply');

                        if (KTUtil.hasClass(reply, 'kt-inbox__reply--on')) {
                            KTUtil.removeClass(reply, 'kt-inbox__reply--on');
                        } else {
                            KTUtil.addClass(reply, 'kt-inbox__reply--on');
                        }
                    });

                    // Show reply form for messages
                    KTUtil.on(viewEl, '.kt-inbox__message .kt-inbox__actions .kt-inbox__group .kt-inbox__icon.kt-inbox__icon--reply', 'click', function(e) {
                        var reply = KTUtil.find(viewEl, '.kt-inbox__reply');
                        KTUtil.addClass(reply, 'kt-inbox__reply--on');
                    });

                    // Remove reply form
                    KTUtil.on(viewEl, '.kt-inbox__reply .kt-inbox__foot .kt-inbox__icon--remove', 'click', function(e) {
                        var reply = this.closest('.kt-inbox__reply');

                        swal.fire({
                            text: "Are you sure to discard this reply ?",
                            //type: "error",
                            buttonsStyling: false,

                            confirmButtonText: "Discard reply",
                            confirmButtonClass: "btn btn-danger",

                            showCancelButton: true,
                            cancelButtonText: "Cancel",
                            cancelButtonClass: "btn btn-label-brand"
                        }).then(function(result) {
                            if (KTUtil.hasClass(reply, 'kt-inbox__reply--on')) {
                                KTUtil.removeClass(reply, 'kt-inbox__reply--on');
                            }
                        });
                    });
                },

                initCompose: function() {
                    initEditor('kt_inbox_compose_editor');
                    initAttachments('kt_inbox_compose_attachments');
                    initForm('kt_inbox_compose_form');

                    // Remove reply form
                    KTUtil.on(composeEl, '.kt-inbox__form .kt-inbox__foot .kt-inbox__secondary .kt-inbox__icon.kt-inbox__icon--remove', 'click', function(e) {
                        swal.fire({
                            text: "Are you sure to discard this message ?",
                            type: "danger",
                            buttonsStyling: false,

                            confirmButtonText: "Discard draft",
                            confirmButtonClass: "btn btn-danger",

                            showCancelButton: true,
                            cancelButtonText: "Cancel",
                            cancelButtonClass: "btn btn-label-brand"
                        }).then(function(result) {
                            $(composeEl).modal('hide');
                        });
                    });
                }
            };
        }();

        KTUtil.ready(function() {
            KTAppInbox.init();
        });

    </script>
{% endput %}
