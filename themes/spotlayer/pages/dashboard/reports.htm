title = "Reports"
url = "/dashboard/reports/:type/:kind"
layout = "admin"
is_hidden = 0
role = 0
permission = 0
anonymous_only = 0
logged_only = 1
child_of = "dashboard/dashboard"
menu_breadcrumb = "report"
hide_crumb = 0
remove_crumb_trail = 0
crumb_disabled = 0

[viewBag]
==
<?php
function onStart(){
    if(!Auth::getUser()->hasUserPermission(["report"],'r')) {
        \Flash::error($this['theme_lang']['not_allowed']);
    }

    $this->page->listing        = true;
    $this->page->actions = array(
        'buttons'   =>  array(
            array(
                'id'    =>  'Print',
                'title' =>  $this['theme_lang']['print'],
                'icon'  =>  'flaticon2-print',
                'type'  =>  'info',
                'url'   =>  'javascript:;',
            ),
            array(
                'id'    =>  'Export',
                'title' =>  $this['theme_lang']['export_excel'],
                'icon'  =>  'flaticon-download',
                'type'  =>  'info',
                'url'   =>  'javascript:;',
            ),
        ),
        'delete'    =>  true,
    );

    $this['employees']  = RainLab\User\Models\User::whereNotIn('role_id',[1,5])->select('id','name')->get();
}
function onEnd(){
    switch($this->param('kind')){
        case 'delayed':
            $this->page->title = $this['theme_lang']['shipments_delayed_reports'];
            break;
        case 'delivered':
            $this->page->title = $this['theme_lang']['shipments_delivered_reports'];
            break;
        case 'deposited':
            $this->page->title = $this['theme_lang']['transactions_deposited_reports'];
            break;
        case 'withdrwal':
            $this->page->title = $this['theme_lang']['transactions_withdrwal_reports'];
            break;
    }
}
function onPrint()
{
    $data = post();

    if(isset($data['created_at']) && $data['created_at'] !=''){
        \Session::put('created_at', $data['created_at']);
    }

    if($this->param('type') == 'shipments'){
        if(isset($data['sender_id']) && $data['sender_id'] !=''){
            \Session::put('sender_id', $data['sender_id']);
        }
        if(isset($data['employee_id']) && $data['employee_id'] !=''){
            \Session::put('employee_id', $data['employee_id']);
        }
    }elseif($this->param('type') == 'transactions'){
        if(isset($data['for_id']) && $data['for_id'] !=''){
            \Session::put('for_id', $data['for_id']);
        }
        if(isset($data['status_id']) && $data['status_id'] !=''){
            \Session::put('status_id', $data['status_id']);
        }
    }
    return Redirect::to('dashboard/reports/'.$this->param('type').'/'.$this->param('kind').'/print');
}
function onExport()
{
    $data = post();

    if(isset($data['created_at']) && $data['created_at'] !=''){
        \Session::put('created_at', $data['created_at']);
    }

    if($this->param('type') == 'shipments'){
        if(isset($data['sender_id']) && $data['sender_id'] !=''){
            \Session::put('sender_id', $data['sender_id']);
        }
        if(isset($data['employee_id']) && $data['employee_id'] !=''){
            \Session::put('employee_id', $data['employee_id']);
        }
    }elseif($this->param('type') == 'transactions'){
        if(isset($data['for_id']) && $data['for_id'] !=''){
            \Session::put('for_id', $data['for_id']);
        }
        if(isset($data['status_id']) && $data['status_id'] !=''){
            \Session::put('status_id', $data['status_id']);
        }
    }
    return Redirect::to('dashboard/reports/'.$this->param('type').'/'.$this->param('kind').'/excel');
}
function onGetclients()
{
    $data = post();
    $item = '';
    $array = array();
    if(isset($data['term']) && $data['term'] != ''){
        $item = $data['term'];
        $items = \RainLab\User\Models\User::where('role_id', 5)
                    ->where(function($q) use($item){
                        $q->where('id', 'like', "%$item%");
                        $q->orWhere('name', 'like', "%$item%");
                        $q->orWhere('username', 'like', "%$item%");
                        $q->orWhere('email', 'like', "%$item%");
                        $q->orWhere('phone', 'like', "%$item%");
                        $q->orWhere('mobile', 'like', "%$item%");
                    })
                    ->get();

        foreach($items as $item){
            $array[] = array("id"=>$item->id, "text"=>$item->name, "mobile"=>$item->mobile);
        }
    }
    return $array;
}
function onGetusers()
{
    $data = post();
    $item = '';
    $array = array();
    if(isset($data['term']) && $data['term'] != ''){
        $item = $data['term'];
        $items = \RainLab\User\Models\User::where('role_id', '!=',1)
                    ->where(function($q) use($item){
                        $q->where('id', 'like', "%$item%");
                        $q->orWhere('name', 'like', "%$item%");
                        $q->orWhere('username', 'like', "%$item%");
                        $q->orWhere('email', 'like', "%$item%");
                        $q->orWhere('phone', 'like', "%$item%");
                        $q->orWhere('mobile', 'like', "%$item%");
                    })
                    ->get();

        foreach($items as $item){
            $array[] = array("id"=>$item->id, "text"=>$item->name, "mobile"=>$item->mobile.' ('.$item->role->name.')');
        }
    }
    return $array;
}
?>
==
<div class="kt-portlet">
    <div class="kt-portlet__body kt-portlet__body--fit">
        <div class="kt-portlet__body  list-controls" id="filter_form">
            <div class="form-group row kt-margin-b-0">
                <div class="col-lg-4">
                    <label>{{'Date range'|__}}:</label>
                    <div class='input-group pull-right' id='daterangepicker'>
                        <input type='text' class="form-control" name="created_at" id="created_at" readonly placeholder="{{'Select date range'|__}}"/>
                        <div class="input-group-append">
                            <span class="input-group-text"><i class="la la-calendar-check-o"></i></span>
                        </div>
                    </div>
                </div>
                {% if this.param.type == 'shipments' %}
                    <div class="col-lg-3">
                        <label>{{'Sender'|__}}:</label>
                        <select class="form-control clients" name="sender_id" id="sender_id" >
                            <option data-hidden="true"></option>
                        </select>
                    </div>
                    <div class="col-lg-3">
                        <label>{{'Employee'|__}}:</label>
                        <select class="form-control m-bootstrap-select" name="employee_id" id="employee_id" data-live-search="true">
                             <option data-hidden="true"></option>
                             {% for employee in employees %}
                                <option value="{{employee.id}}">{{employee.name}}</option>
                             {% endfor %}
                        </select>
                    </div>
                {% endif %}
                <div class="col-lg-2 kt-padding-t-25">
                    <button type="reset" class="btn btn-secondary" id="reset">{{'Reset'|__}}</button>
                </div>
            </div>
        </div>
        <div class="kt-portlet__body">
            <div class="kt-datatable"></div>
        </div>
    </div>
</div>


{% put scripts %}
<script type="text/javascript">
"use strict";
var KTAppUserListDatatable = function () {
    // variables
    var datatable;

    // init
    var init = function (type) {

        datatable = $('.kt-datatable').KTDatatable({
            translate: {
                records: {
                    processing: '{{"Please wait"|__}}...',
                    noRecords: '{{"No records found"|__}}'
                },
                toolbar: {
                    pagination: {
                        items: {
                            default: {
                                first: '{{"First"|__}}',
                                prev: '{{"Previous"|__}}',
                                next: '{{"Next"|__}}',
                                last: '{{"Last"|__}}',
                                more: '{{"More pages"|__}}',
                                input: '{{"Page number"|__}}',
                                select: '{{"Select page size"|__}}'
                            },

                            info: "{{"Displaying"|__}} {{ '{{' }}start{{ '}}' }} - {{ '{{' }}end{{ '}}' }} {{"of"|__}} {{total}} {{"records"|__}}"
                        }
                    }
                }
            },

            // layout definition
            layout: {
                scroll: true, // enable/disable datatable scroll both horizontal and vertical when needed.
                footer: false, // display/hide footer
            },

            // column sorting
            sortable: true,

            pagination: true,

            search: {
                input: $('#generalSearch'),
                delay: 400,
            },
            data: {
                type: 'remote',
                source: {
                    read: {
                        {% if this.param.type == 'shipments' %}
                            url: '{{url("api/shipments")}}/{{this.param.kind}}',
                        {% elseif this.param.type == 'transactions' %}
                            url: '{{url("api/transactions")}}/{{this.param.kind}}',
                        {% endif %}
                    },
                },
                pageSize: 10, // display 20 records per page
                serverPaging: true,
                serverFiltering: true,
                serverSorting: true,
            },
            // columns definition
            {% if this.param.type == 'shipments' %}
                columns: [
                    {
                        field: "number",
                        title: "{{'Tracking'|__}}",
                        sortable: true,
                        width: 100,
                        template: function(row) {
                            return '<a href="{{url('dashboard/shipments')}}/'+row.id+'/view">{{settings.tracking.prefix_order}}'+row.shipping_number+'</a>';
                        }
                    },
                    {
                        field: "details",
                        title: "{{'Shipment Details'|__}}",
                        sortable: false,
                        width: 'auto',
                        template: function(data, i) {
                            var output  = '\
                                <div class="kt-user-card-v2 kt-user-card-v2--uncircle">\
                                    <div class="kt-user-card-v2__details">\
                                        <a href="{% if user.hasUserPermission('client', 'r') %}{{url('dashboard/clients')}}/'+data.sender.id+'/view{% else %}javascript:;{% endif %}" class="kt-user-card-v2__name"><b class="kt-font-boldest">{{"Sender"|__}}:</b> ' + data.sender.name + '</a>\
                                        <span class="kt-user-card-v2__email"><b class="kt-font-boldest">{{"From"|__}}:</b> ' + data.shipping_from_area + '</span>';
                            if(data.receiver){
                                output      += '\
                                            <a href="{% if user.hasUserPermission('client', 'r') %}{{url('dashboard/clients')}}/'+data.receiver.id+'/view{% else %}javascript:;{% endif %}" class="kt-margin-t-5 kt-user-card-v2__name"><b>{{"Receiver"|__}}:</b> ' + data.receiver.name + '</a>\
                                            <span class="kt-user-card-v2__email"><b class="kt-font-boldest">{{"To"|__}}:</b> ' + data.shipping_to_area + '</span>';
                            }
                            output      += '\
                                    </div>\
                                </div>';
                            return output;
                        }
                    },
                    {
                        field: "office",
                        title: "{{'Branch'|__}}",
                        sortable: false,
                        width: 100,
                        template: function(data, i) {
                            return '<a href="javascript:;">'+data.office+'</a>';
                        }
                    },
                    {
                        field: "status",
                        title: "{{'Status'|__}}",
                        sortable: false,
                        width: 80,
                        template: function(row) {
                            var output = '<span class="btn btn-bold btn-sm btn-label-' + row.status.color + '">' + row.status.name + '</span>';
                            if(row.delayed == 1){
                                output  += '<span class="btn btn-bold btn-sm btn-label-danger">{{"Delayed"|__}}</span>';
                            }

                            return output;
                        }
                    },
                    {
                        field: "created_at_date",
                        title: "{{'Date'|__}}",
                        sortable: false,
                        width: 100,
                    }
                ]
            {% elseif this.param.type == 'transactions' %}
                columns: [
                    {
                        field: "id",
                        title: "{{'ID'|__}}",
                        sortable: false,
                        width: 50,
        				template: function(data, i) {
        					var output = '\
                                <div class="kt-user-card-v2 kt-user-card-v2--uncircle">\
                                    <div class="kt-user-card-v2__details">\
                                         <a href="{{url("dashboard/transactions")}}/' + data.id+ '/view" class="kt-user-card-v2__name">' + data.id+ '</a>\
                                     </div>\
                                </div>';
        					return output;
        				},
                    },
                    {
                        field: "movement",
                        title: "{{'Movement Type'|__}}",
                        sortable: false,
                        width: 250,
                        template: function(row) {
                            //1 = withdrawl | 2 = deposit | 3 = Deduction from the wallet | 4 = add to wallet | 5 =  Deduction of commission balance | 6 = Add to the commission balance | 7 = Deduction from the balance of packages | 8 = Add  to the balance of packages
                            var status = {
                                1: {
                                    'title': '{{"Withdrawl"|__}}',
                                    'class': 'info'
                                },
                                2: {
                                    'title': '{{"Deposit"|__}}',
                                    'class': 'info'
                                },
                                3: {
                                    'title': '{{"Deduction from the wallet"|__}}',
                                    'class': 'info'
                                },
                                4: {
                                    'title': '{{"Add to wallet"|__}}',
                                    'class': 'info'
                                },
                                5: {
                                    'title': '{{"Deduction of commission balance"|__}}',
                                    'class': 'info'
                                },
                                6: {
                                    'title': '{{"Add to the commission balance"|__}}',
                                    'class': 'info'
                                },
                                7: {
                                    'title': '{{"Deduction from the balance of packages"|__}}',
                                    'class': 'info'
                                },
                                8: {
                                    'title': '{{"Add  to the balance of packages"|__}}',
                                    'class': 'info'
                                },
                            };
                            return '<span class="kt-badge kt-badge--' + status[row.movement].class + ' kt-badge--dot"></span>&nbsp;<a href="{{url("dashboard/transactions")}}/' + row.id+ '/view" class="kt-font-bold kt-font-' + status[row.movement].class + '">' + status[row.movement].title + '</a>';
                        }
                    },
                    {
                        field: "date",
                        title: "{{'Date'|__}}",
                        sortable: false,
                        width: 100,
                    },
                    {
                        field: "amount",
                        title: "{{'Amount'|__}}",
                        sortable: false,
                        width: 100,
                    },
                    {
                        field: "created_at",
                        title: "{{'Created On'|__}}",
                        sortable: false,
                        width: 100,
        				template: function(data, i) {
        					var output = '\
                                <div class="kt-user-card-v2 kt-user-card-v2--uncircle">\
                                    <div class="kt-user-card-v2__details">\
                                        <a href="javascript:;" class="kt-user-card-v2__name">' + data.created_at_date + '</a>\
                                        <span class="kt-user-card-v2__email">' + data.created_at_time + '</span>\
                                    </div>\
                                </div>';
        					return output;
        				}
                    },
                    {
                        field: "payment_with",
                        title: "{{'Received by'|__}}",
                        sortable: false,
                        width: 100,
        				template: function(data, i) {
                            if(data.item_id){
            					var output = '\
                                    <div class="kt-user-card-v2 kt-user-card-v2--uncircle">\
                                        <div class="kt-user-card-v2__details">\
                                             <a href="{{url("dashboard/employees")}}/' + data.payment_with+ '/transactions" class="kt-user-card-v2__name">' + data.payment_with_employee+ '</a>\
                                         </div>\
                                    </div>';
            					return output;
                            }else{
            					return '-';
                            }
        				},
                    },
                    {
                        field: "description",
                        title: "{{'Description'|__}}",
                        sortable: false,
                        width: 150,
        				template: function(data, i) {
                            if(data.description){
            					return data.description;
                            }else{
            					return '-';
                            }
        				}
                    },
                    {
                        field: "item_id",
                        title: "{{'Shipment'|__}}",
                        sortable: false,
                        width: 50,
        				template: function(data, i) {
                            if(data.item_id){
            					var output = '\
                                    <div class="kt-user-card-v2 kt-user-card-v2--uncircle">\
                                        <div class="kt-user-card-v2__details">\
                                             <a href="{{url("dashboard/shipments")}}/' + data.item_id+ '/view" class="kt-user-card-v2__name">#' + data.item_id+ '</a>\
                                         </div>\
                                    </div>';
            					return output;
                            }else{
            					return '-';
                            }
        				}
                    },
                ]
            {% endif %}

        });
    };

    // search
    var search = function () {
        $('#filter_form select,#filter_form input,#daterangepicker .form-control').each(function(){
            $(this).on('change', function () {
                datatable.search($(this).val().toLowerCase(), $(this).attr('name'));
            });
        });
        $('#reset').on('click', function () {
            datatable.destroy();
            $('#generalSearch').val('');
            $('#filter_form select,#filter_form input,#daterangepicker .form-control').each(function(){
                $(this).val('');
            });
            $('#filter_form select').each(function(){
                $(this).selectpicker("refresh");
            });
            $('#filter_form select.clients,#filter_form select.users').each(function(){
                $(this).val('').trigger('change');
            });
            init();
        });
    };

    // selection
    var selection = function () {
        // init form controls
        //$('#kt_form_status, #kt_form_type').selectpicker();

        // event handler on check and uncheck on records
        datatable.on('kt-datatable--on-check kt-datatable--on-uncheck kt-datatable--on-layout-updated', function (e) {
            var checkedNodes = datatable.rows('.kt-datatable__row--active').nodes(); // get selected records
            var count = checkedNodes.length; // selected records count

            $('#kt_subheader_group_selected_rows').html(count);

            if (count > 0) {
                $('#kt_subheader_search').addClass('kt-hidden');
                $('#kt_subheader_group_actions').removeClass('kt-hidden');
            } else {
                $('#kt_subheader_search').removeClass('kt-hidden');
                $('#kt_subheader_group_actions').addClass('kt-hidden');
            }
        });
    }

    // selected records status update
    var selectedStatusUpdate = function () {
        $('#kt_subheader_group_actions_status_change').on('click', "[data-toggle='status-change']", function () {
            var status = $(this).find(".kt-nav__link-text").html();

            // fetch selected IDs
            var ids = datatable.rows('.kt-datatable__row--active').nodes().find('.kt-checkbox--single > [type="checkbox"]').map(function (i, chk) {
                return $(chk).val();
            });

            if (ids.length > 0) {
                // learn more: //sweetalert2.github.io/
                swal.fire({
                    buttonsStyling: false,

                    html: "{{"Are you sure to update"|__}} " + ids.length + " {{"selected records status to"|__}} " + status + " ?",
                    type: "info",

                    confirmButtonText: "{{"Yes, update"|__}}!",
                    confirmButtonClass: "btn btn-sm btn-bold btn-brand",

                    showCancelButton: true,
                    cancelButtonText: "{{"No, cancel"|__}}",
                    cancelButtonClass: "btn btn-sm btn-bold btn-default"
                }).then(function (result) {
                    if (result.value) {
                        swal.fire({
                            title: '{{"Deleted"|__}}!',
                            text: '{{"Your selected records statuses have been updated"|__}}!',
                            type: 'success',
                            buttonsStyling: false,
                            confirmButtonText: "{{"OK"|__}}",
                            confirmButtonClass: "btn btn-sm btn-bold btn-brand",
                        })
                        // result.dismiss can be 'cancel', 'overlay',
                        // 'close', and 'timer'
                    } else if (result.dismiss === 'cancel') {
                        swal.fire({
                            title: '{{"Cancelled"|__}}',
                            text: '{{"You selected records statuses have not been updated"|__}}!',
                            type: 'error',
                            buttonsStyling: false,
                            confirmButtonText: "{{"OK"|__}}",
                            confirmButtonClass: "btn btn-sm btn-bold btn-brand",
                        });
                    }
                });
            }
        });
    }

    // selected records delete
    var selectedDelete = function () {
        $('#kt_subheader_group_actions_delete_all').on('click', function () {
            // fetch selected IDs
            var selected = [];
            var type    = $('.delete_record').attr('data-type');
            var ids = datatable.rows('.kt-datatable__row--active').nodes().find('.kt-checkbox--single > [type="checkbox"]').map(function (i, chk) {
                selected[$(chk).val()] = $(chk).val();
                return $(chk).val();
            });

            if (ids.length > 0) {
                // learn more: //sweetalert2.github.io/
                swal.fire({
                    buttonsStyling: false,

                    text: "{{'Are you sure to delete'|__}} " + ids.length + " {{'selected records ?'|__}}",
                    type: "error",

                    confirmButtonText: "{{'Yes, delete!'|__}}",
                    confirmButtonClass: "btn btn-sm btn-bold btn-danger",

                    showCancelButton: true,
                    cancelButtonText: '{{"No, cancel"|__}}',
                    cancelButtonClass: "btn btn-sm btn-bold btn-brand"
                }).then(function (result) {
                    if (result.value) {
                        $.request('onDelete', {
                            data: {id: selected,type: type},
                            success: function(data) {
                                swal.fire({
                                    title: '{{"Deleted!"|__}}',
                                    text: '{{"Your selected records have been deleted! :("|__}}',
                                    type: 'success',
                                    buttonsStyling: false,
                                    confirmButtonText: '{{"OK"|__}}',
                                    confirmButtonClass: "btn btn-sm btn-bold btn-brand",
                                });
                                datatable.reload();
                            }
                        });
                        // result.dismiss can be 'cancel', 'overlay',
                        // 'close', and 'timer'
                    } else if (result.dismiss === 'cancel') {
                        swal.fire({
                            title: '{{"Cancelled"|__}}',
                            text: '{{"You selected records have not been deleted! :)"|__}}',
                            type: 'error',
                            buttonsStyling: false,
                            confirmButtonText: '{{"OK"|__}}',
                            confirmButtonClass: "btn btn-sm btn-bold btn-brand",
                        });
                    }
                });
            }
        });


        $('body').on('click','.delete_record',function(){
            var id      = $(this).attr('rel');
            var type    = $(this).attr('data-type');
            swal.fire({
                buttonsStyling: false,

                text: "{{'Are you sure to delete this item ?'|__}}",
                type: "danger",

                confirmButtonText: "{{'Yes, delete!'|__}}",
                confirmButtonClass: "btn btn-sm btn-bold btn-danger",

                showCancelButton: true,
                cancelButtonText: '{{"No, cancel"|__}}',
                cancelButtonClass: "btn btn-sm btn-bold btn-brand"
            }).then(function (result) {
                if (result.value) {
                    $.request('onDelete', {
                        data: {id: id, type: type},
                        success: function(data) {

                            swal.fire({
                                title: '{{"Deleted!"|__}}',
                                text: '{{"Your selected record has been deleted! :("|__}}',
                                type: 'success',
                                buttonsStyling: false,
                                confirmButtonText: '{{"OK"|__}}',
                                confirmButtonClass: "btn btn-sm btn-bold btn-brand",
                            });
                            datatable.reload();
                        }
                    });
                    // result.dismiss can be 'cancel', 'overlay',
                    // 'close', and 'timer'
                } else if (result.dismiss === 'cancel') {
                    swal.fire({
                        title: '{{"Cancelled"|__}}',
                        text: '{{"You selected record has not been deleted! :)"|__}}',
                        type: 'error',
                        buttonsStyling: false,
                        confirmButtonText: '{{"OK"|__}}',
                        confirmButtonClass: "btn btn-sm btn-bold btn-brand",
                    });
                }
            });
        });


        $('body').on('click', '#createManifest', function (e) {
            e.preventDefault();

            // fetch selected IDs
            var selected = [];
            var ids = datatable.rows('.kt-datatable__row--active').nodes().find('.kt-checkbox--single > [type="checkbox"]').map(function (i, chk) {
                selected[$(chk).val()] = $(chk).val();
                return $(chk).val();
            });
            if (ids.length > 0) {
                // learn more: //sweetalert2.github.io/
                swal.fire({
                    buttonsStyling: false,

                    text: "{{'Are you sure you want to create new manifest with'|__}} " + ids.length + " {{'selected records ?'|__}}",
                    type: "error",

                    confirmButtonText: "{{'Yes!'|__}}",
                    confirmButtonClass: "btn btn-sm btn-bold btn-danger",

                    showCancelButton: true,
                    cancelButtonText: '{{"No, cancel"|__}}',
                    cancelButtonClass: "btn btn-sm btn-bold btn-brand"
                }).then(function (result) {
                    if (result.value) {
                        $('#manifest_id').val(selected);
                        $('#manifest_modal').modal('toggle');
                    } else if (result.dismiss === 'cancel') {
                        swal.fire({
                            title: '{{"Cancelled"|__}}',
                            text: '{{"Your manifest not created! :)"|__}}',
                            type: 'error',
                            buttonsStyling: false,
                            confirmButtonText: '{{"OK"|__}}',
                            confirmButtonClass: "btn btn-sm btn-bold btn-brand",
                        });
                    }
                });
            }
        });

        $('body').on('click', '#PrintEmployeeOrders', function (e) {
            e.preventDefault();
            $('#chooseEmployee').modal('toggle');
        });

    }

    var updateTotal = function () {
        datatable.on('kt-datatable--on-layout-updated', function () {
            console.log(datatable.getTotalRows());
            $('#kt_subheader_total').html(datatable.getTotalRows() + ' {{"Total"|__}}');
        });
    };

    var reload = function () {
        datatable.reload();
    };

    var destroy = function () {
        datatable.destroy();
        $('#generalSearch').val('');

        $('#filter_form select,#filter_form input').each(function(){
            $(this).val('');
        });
        $('#filter_form select').each(function(){
            $(this).selectpicker("refresh");
        });
    };

    return {
        // public functions
        init: function (type) {
            init(type);
            search();
            selection();
            selectedStatusUpdate();
            selectedDelete();
            updateTotal();
        },

        reload: function(){
            reload();
        },

        destroy: function(){
            destroy();
        }
    };
}();

KTUtil.ready(function () {
    KTAppUserListDatatable.init();

    function formatRepo(repo) {
        if (repo.loading) return repo.text;
        var markup = "<div class='select2-result-repository clearfix'>" +
                        "<div class='select2-result-repository__meta'>" +
                        "<div class='select2-result-repository__title'>" + repo.text + "</div>";
                        if (repo.mobile) {
                            markup += "<div class='select2-result-repository__description'>" + repo.mobile + "</div>";
                        }
                    markup += "</div></div>";
        return markup;
    }

    function formatRepoSelection(repo) {
        return repo.text || repo.id;
    }

    $(".clients").select2({
        {% if currentLang == 'ar'%}
            dir: "rtl",
        {% endif %}
        language: {
            errorLoading: function () {
                return "{{'There is an error while searching'|__}}...";
            },
            inputTooLong: function (args) {
                return "{{'You must enter less characters'|__}}...";
            },
            inputTooShort: function (args) {
                return "{{'You must enter more characters'|__}}...";
            },
            loadingMore: function () {
                return "{{'Loading More'|__}}...";
            },
            maximumSelected: function (args) {
                return "{{'Maximum element has been selected'|__}}...";
            },
            noResults: function () {
                return "{{'No result found'|__}}...";
            },
            searching: function () {
                return "{{'Searching'|__}}...";
            }
        },
        placeholder: "{{'Search for client'|__}}",
        allowClear: true,
        ajax: {
            transport: function(params, success, failure) {
                var $request = $.request('onGetclients', {
                    data: params.data,
                })
                $request.done(success)
                $request.fail(failure)

                return $request
            },
            dataType: 'json',
            processResults: function (response) {
                return {
                    results: response
                };
            },
            cache: true
        },
        escapeMarkup: function(markup) {
            return markup;
        },
        minimumInputLength: 0,
        templateResult: formatRepo,
        templateSelection: formatRepoSelection
    });
    $(".users").select2({
        {% if currentLang == 'ar'%}
            dir: "rtl",
        {% endif %}
        language: {
            errorLoading: function () {
                return "{{'There is an error while searching'|__}}...";
            },
            inputTooLong: function (args) {
                return "{{'You must enter less characters'|__}}...";
            },
            inputTooShort: function (args) {
                return "{{'You must enter more characters'|__}}...";
            },
            loadingMore: function () {
                return "{{'Loading More'|__}}...";
            },
            maximumSelected: function (args) {
                return "{{'Maximum element has been selected'|__}}...";
            },
            noResults: function () {
                return "{{'No result found'|__}}...";
            },
            searching: function () {
                return "{{'Searching'|__}}...";
            }
        },
        placeholder: "{{'Search for client'|__}}",
        allowClear: true,
        ajax: {
            transport: function(params, success, failure) {
                var $request = $.request('onGetusers', {
                    data: params.data,
                })
                $request.done(success)
                $request.fail(failure)

                return $request
            },
            dataType: 'json',
            processResults: function (response) {
                return {
                    results: response
                };
            },
            cache: true
        },
        escapeMarkup: function(markup) {
            return markup;
        },
        minimumInputLength: 0,
        templateResult: formatRepo,
        templateSelection: formatRepoSelection
    });

    moment.locale('{{currentLang}}');
    moment.updateLocale('{{currentLang}}', {
        months : [
            "{{'January'|__}}", "{{'February'|__}}", "{{'March'|__}}", "{{'April'|__}}", "{{'May'|__}}", "{{'June'|__}}", "{{'July'|__}}",
            "{{'August'|__}}", "{{'September'|__}}", "{{'October'|__}}", "{{'November'|__}}", "{{'December'|__}}"
        ]
    });
    var picker = $('#daterangepicker');
    var start = moment().startOf('month');
    var end = moment().endOf('month');

    function cb(start, end, label) {
        var title = '';
        var range = '';

        if ((end - start) < 100 || label == 'Today') {
            title = '{{"Today"|__}}:';
            range = start.format(KTAppOptions.daterangeformat);
        } else if (label == '{{"Yesterday"|__}}') {
            title = '{{"Yesterday"|__}}:';
            range = start.format(KTAppOptions.daterangeformat);
        } else {
            range = start.format(KTAppOptions.daterangeformat) + ' - ' + end.format(KTAppOptions.daterangeformat);
        }

        $("#daterangepicker .form-control").val(range);
        $("#daterangepicker .form-control").trigger('change');
    }

   $("#daterangepicker").daterangepicker({
       direction: KTUtil.isRTL(),
       locale: {
           "format": "MM/DD/YYYY",
           "separator": " - ",
           "applyLabel": "{{'Apply'|__}}",
           "cancelLabel": "{{'Cancel'|__}}",
           "fromLabel": "{{'From'|__}}",
           "toLabel": "{{'To'|__}}",
           "customRangeLabel": "{{'Custom'|__}}",
           "daysOfWeek": [
               "{{'Su'|__}}",
               "{{'Mo'|__}}",
               "{{'Tu'|__}}",
               "{{'We'|__}}",
               "{{'Th'|__}}",
               "{{'Fr'|__}}",
               "{{'Sa'|__}}"
           ],
           "monthNames": [
               "{{'January'|__}}",
               "{{'February'|__}}",
               "{{'March'|__}}",
               "{{'April'|__}}",
               "{{'May'|__}}",
               "{{'June'|__}}",
               "{{'July'|__}}",
               "{{'August'|__}}",
               "{{'September'|__}}",
               "{{'October'|__}}",
               "{{'November'|__}}",
               "{{'December'|__}}"
           ],
           "monthsShort": [
               "{{'January'|__}}",
               "{{'February'|__}}",
               "{{'March'|__}}",
               "{{'April'|__}}",
               "{{'May'|__}}",
               "{{'June'|__}}",
               "{{'July'|__}}",
               "{{'August'|__}}",
               "{{'September'|__}}",
               "{{'October'|__}}",
               "{{'November'|__}}",
               "{{'December'|__}}"
           ],
           "firstDay": 1
       },
       startDate: start,
       endDate: end,
       opens: 'left',
       ranges: {
           '{{"Today"|__}}': [moment(), moment()],
           '{{"Yesterday"|__}}': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
           '{{"Last 7 Days"|__}}': [moment().subtract(6, 'days'), moment()],
           '{{"Last 30 Days"|__}}': [moment().subtract(29, 'days'), moment()],
           '{{"This Month"|__}}': [moment().startOf('month'), moment().endOf('month')],
           '{{"Last Month"|__}}': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
       }
   }, cb);


   $('#Print').on('click', function () {
       $.request('onPrint', {
           {% if this.param.type == 'shipments' %}
               data: {created_at: $('#created_at').val(), sender_id: $('#sender_id').val(), employee_id: $('#employee_id').val()},
           {% elseif this.param.type == 'transactions' %}
               data: {created_at: $('#created_at').val(), for_id: $('#for_id').val(), status_id: $('#status_id').val()},
           {% endif %}
           success: function(res){
                if (res.X_OCTOBER_REDIRECT) {
                    var win = window.open(res.X_OCTOBER_REDIRECT, '_blank');
                    win.focus();
                }
            },
       });
   });
   $('#Export').on('click', function () {
       $.request('onExport', {
           {% if this.param.type == 'shipments' %}
               data: {created_at: $('#created_at').val(), sender_id: $('#sender_id').val(), employee_id: $('#employee_id').val()},
           {% elseif this.param.type == 'transactions' %}
               data: {created_at: $('#created_at').val(), for_id: $('#for_id').val(), status_id: $('#status_id').val()},
           {% endif %}
       });
   });
});
</script>
{% endput %}
