<?php namespace Responsiv\Pay\PaymentTypes;

use Request;
use Backend;
use Redirect;
use Validator;
use Cms\Classes\Page;
use October\Rain\Network\Http;
use Responsiv\Pay\Models\Invoice;
use Responsiv\Pay\Classes\GatewayBase;
use Responsiv\Pay\Models\InvoiceStatus;
use Responsiv\Pay\Models\InvoiceStatusLog;
use Responsiv\Currency\Facades\Currency as CurrencyHelper;
use SystemException;
use ApplicationException;
use ValidationException;
use Exception;

class PaypalPro extends GatewayBase
{

    /**
     * {@inheritDoc}
     */
    public function gatewayDetails()
    {
        return [
            'name'        => 'PayPal Pro',
            'description' => 'PayPal Pro payment method with payment form hosted on your server'
        ];
    }

    /**
     * {@inheritDoc}
     */
    public function defineFormFields()
    {
        return 'fields.yaml';
    }

    /**
     * {@inheritDoc}
     */
    public function defineValidationRules()
    {
        return [
            'api_signature' => 'required',
            'api_username'  => 'required',
            'api_password'  => 'required',
        ];
    }

    /**
     * {@inheritDoc}
     */
    public function initConfigData($host)
    {
        $host->test_mode = true;
        $host->invoice_status = $this->createInvoiceStatusModel()->getPaidStatus();
    }

    /**
     * Action field options
     */
    public function getPaypalActionOptions()
    {
        return [
            'Sale'          => 'Capture',
            'Authorization' => 'Authorization only'
        ];
    }

    /**
     * {@inheritDoc}
     */
    public function isApplicable($amount)
    {
        return $amount <= 10000;
    }

    /**
     * Get the hostname for Paypal's servers
     */
    public function getEndpointUrl()
    {
        return $this->model->test_mode
            ? 'api-3t.sandbox.paypal.com'
            : 'api-3t.paypal.com';
    }

    /**
     * {@inheritDoc}
     */
    public function processPaymentForm($data, $invoice)
    {
        $host = $this->getHostObject();

        $rules = [
            'card_type'               => 'required',
            'first_name'              => 'required',
            'last_name'               => 'required',
            'expiry_date_month'       => ['required', 'regex:/^[0-9]*$/'],
            'expiry_date_year'        => ['required', 'regex:/^[0-9]*$/'],
            'issue_number'            => 'numeric',
            'expirt_start_month_date' => 'numeric',
            'expirt_start_year_date'  => 'numeric',
            'card_number'             => ['required', 'regex:/^[0-9]*$/'],
            'CVV'                     => ['required', 'regex:/^[0-9]*$/'],
        ];

        $validation = Validator::make($data, $rules);

        try {
            if ($validation->fails())
                throw new ValidationException($validation);
        }
        catch (Exception $ex) {
            $this->logPaymentAttempt($invoice, $ex->getMessage(), 0, [], [], null);
            throw $ex;
        }

        /*
         * Send payment request
         */
        @set_time_limit(3600);
        $endpoint = $this->getEndpointUrl();

        $fields = [];
        $response = null;
        $responseFields = [];

        try {
            $expMonth = array_get($data, 'expiry_date_month') < 10
                ? '0'.array_get($data, 'expiry_date_month')
                : array_get($data, 'expiry_date_month');

            if (strlen(array_get($data, 'expirt_start_month_date'))) {
                $startMonth = array_get($data, 'expirt_start_month_date') < 10
                    ? '0'.array_get($data, 'expirt_start_month_date')
                    : array_get($data, 'expirt_start_month_date');
            }
            else {
                $startMonth = null;
            }

            $userIp = Request::getClientIp();
            if ($userIp == '::1')
                $userIp = '192.168.0.1';

            $fields['PWD'] = $host->api_password;
            $fields['USER'] = $host->api_username;
            $fields['SIGNATURE'] = $host->api_signature;
            $fields['VERSION'] = '3.0';
            $fields['METHOD'] = 'DoDirectPayment';

            $fields['CREDITCARDTYPE'] = array_get($data, 'card_type');
            $fields['ACCT'] = array_get($data, 'card_number');
            $fields['EXPDATE'] = $expMonth.array_get($data, 'expiry_date_year');
            $fields['STARTDATE'] = $startMonth.array_get($data, 'expirt_start_year_date');
            $fields['CVV2'] = array_get($data, 'CVV');
            $fields['AMT'] = $invoice->total;
            $fields['ISSUENUMBER'] = array_get($data, 'issue_number');
            $fields['CURRENCYCODE'] = CurrencyHelper::primaryCode();

            $fields['FIRSTNAME'] = array_get($data, 'first_name');
            $fields['LASTNAME'] = array_get($data, 'last_name');
            $fields['IPADDRESS'] = $userIp;
            $fields['STREET'] = $invoice->street_addr;

            if ($invoice->state)
                $fields['STATE'] = $invoice->state->code;

            $fields['COUNTRY'] = $invoice->country->name;
            $fields['CITY'] = $invoice->city;
            $fields['ZIP'] = $invoice->zip;
            $fields['COUNTRYCODE'] = $invoice->country->code;
            $fields['PAYMENTACTION'] = $host->card_action;

            $fields['ITEMAMT'] = $invoice->subtotal;

            $fields['TAXAMT'] = number_format($invoice->tax, 2, '.', '');

            $itemIndex = 0;
            foreach ($invoice->items as $item) {
                $fields['L_NAME'.$itemIndex] = mb_substr($item->description, 0, 127);
                $fields['L_AMT'.$itemIndex] = number_format($item->price, 2, '.', '');
                $fields['L_QTY'.$itemIndex] = $item->quantity;
                $itemIndex++;
            }

            if ($invoice->discount) {
                $fields['L_NAME'.$itemIndex] = 'Discount';
                $fields['L_AMT'.$itemIndex] = number_format($invoice->discount * -1, 2, '.', '');
                $fields['L_QTY'.$itemIndex] = 1;
                $itemIndex++;
            }

            $fields['INVNUM'] = $invoice->getUniqueId();
            $fields['ButtonSource'] = 'Responsiv_Pay_DP';

            /*
             * Process result
             */
            $response = $this->postData($endpoint, $fields);
            $responseFields = $this->parseResponse($response);

            /*
             * Failed payment
             */
            if (!isset($responseFields['ACK']))
                throw new ApplicationException('Invalid response from PayPal.');

            if ($responseFields['ACK'] !== 'Success' && $responseFields['ACK'] !== 'SuccessWithWarning') {
                for ($i=5; $i>=0; $i--) {
                    if (isset($responseFields['L_LONGMESSAGE'.$i]))
                        throw new ApplicationException($responseFields['L_LONGMESSAGE'.$i]);
                }

                throw new ApplicationException('Invalid response from PayPal.');
            }

            /*
             * Successful payment
             */
            $fields = $this->cleanFields($fields);

            $this->logPaymentAttempt(
                $invoice,
                'Successful payment',
                1,
                $fields,
                $responseFields,
                $response,
                $responseFields['CVV2MATCH'],
                $this->getCcvStatusText($responseFields['CVV2MATCH']),
                $responseFields['AVSCODE'],
                $this->getAvsStatusText($responseFields['AVSCODE'])
            );

            InvoiceStatusLog::createRecord($invoice->payment_method->invoice_status, $invoice);
            $invoice->markAsPaymentProcessed();
        }
        catch (Exception $ex) {

            $fields = $this->cleanFields($fields);
            $cvvCode = $cvvMessage = $avsCode = $avsMessage = null;

            if (array_key_exists('CVV2MATCH', $responseFields)) {
                $cvvCode = $responseFields['CVV2MATCH'];
                $cvvMessage = $this->getCcvStatusText($responseFields['CVV2MATCH']);
                $avsCode = $responseFields['AVSCODE'];
                $avsMessage = $this->getAvsStatusText($responseFields['AVSCODE']);
            }

            $this->logPaymentAttempt(
                $invoice,
                $ex->getMessage(),
                0,
                $fields,
                $responseFields,
                $response,
                $cvvCode,
                $cvvMessage,
                $avsCode,
                $avsMessage
            );

            throw new ApplicationException($ex->getMessage());
        }
    }

    /**
     * Out: Communicate with the PayPal endpoint
     */
    private function postData($endpoint, $fields)
    {
        $errNo = $errorStr = null;

        $socket = null;
        try {
            $socket = @fsockopen('ssl://'.$endpoint, 443, $errNo, $errorStr, 60);
        }
        catch (Exception $ex) {}
        if (!$socket)
            throw new SystemException("Error connecting to PayPal server. Error number: $errNo, error: $errorStr");

        $postString = http_build_query($fields);

        fputs($socket, "POST /nvp HTTP/1.1\r\n");
        fputs($socket, "Host: $endpoint\r\n");
        fputs($socket, "Content-type: application/x-www-form-urlencoded\r\n");
        fputs($socket, "Content-length: ".strlen($postString)."\r\n");
        fputs($socket, "Connection: close\r\n\r\n");
        fputs($socket, $postString . "\r\n\r\n");

        $response = null;
        while (!feof($socket)) {
            $response .= fgets($socket, 4096);
        }

        return $response;
    }

    /**
     * In: Process response from PayPal endpoint
     */
    private function parseResponse($response)
    {
        $matches = [];
        preg_match('/Content\-Length:\s([0-9]+)/i', $response, $matches);
        if (!count($matches))
            throw new ApplicationException('Invalid response from PayPal');

        $elements = substr($response, $matches[1]*-1);
        $elements = explode('&', $elements);

        $result = [];
        foreach ($elements as $element) {
            $element = explode('=', $element);
            if (isset($element[0]) && isset($element[1]))
                $result[$element[0]] = urldecode($element[1]);
        }

        return $result;
    }

    //
    // Internals
    //

    protected function getAvsStatusText($statusCode)
    {
        $statusCode = strtoupper($statusCode);

        if (!strlen($statusCode))
            return 'AVS response code is empty';

        $statusNames = [
            'A' => 'Address only match (no ZIP)',
            'B' => 'Address only match (no ZIP)',
            'C' => 'No match',
            'D' => 'Address and Postal Code match',
            'E' => 'Not allowed for MOTO (Internet/Phone) transactions',
            'F' => 'Address and Postal Code match',
            'G' => 'Not applicable',
            'I' => 'Not applicable',
            'N' => 'No match',
            'P' => 'Postal Code only match (no Address)',
            'R' => 'Retry/not applicable',
            'S' => 'Service not Supported',
            'U' => 'Unavailable/Not applicable',
            'W' => 'Nine-digit ZIP code match (no Address)',
            'X' => 'Exact match',
            'Y' => 'Address and five-digit ZIP match',
            'Z' => 'Five-digit ZIP code match (no Address)',
            '0' => 'All the address information matched',
            '1' => 'None of the address information matched',
            '2' => 'Part of the address information matched',
            '3' => 'The merchant did not provide AVS information. Not processed.',
            '4' => 'Address not checked, or acquirer had no response',
        ];

        if (array_key_exists($statusCode, $statusNames))
            return $statusNames[$statusCode];

        return 'Unknown AVS response code';
    }

    protected function getCcvStatusText($statusCode)
    {
        $statusCode = strtoupper($statusCode);

        if (!strlen($statusCode))
            return 'CCV response code is empty';

        $statusNames = [
            'M' => 'Match',
            'N' => 'No match',
            'P' => 'Not processed',
            'S' => 'Service not supported',
            'U' => 'Service not available',
            'X' => 'No response',
            '0' => 'Match',
            '1' => 'No match',
            '2' => 'The merchant has not implemented CVV2 code handling',
            '3' => 'Merchant has indicated that CVV2 is not present on card',
            '4' => 'Service not available'
        ];

        if (array_key_exists($statusCode, $statusNames))
            return $statusNames[$statusCode];

        return 'Unknown CCV response code';
    }

    /**
     * Strips the field data of any sensitive information
     */
    private function cleanFields($fields)
    {
        unset($fields['PWD']);
        unset($fields['USER']);
        unset($fields['SIGNATURE']);
        unset($fields['VERSION']);
        unset($fields['METHOD']);
        unset($fields['CVV2']);
        $fields['ACCT'] = '...'.substr($fields['ACCT'], -4);
        return $fields;
    }


}
